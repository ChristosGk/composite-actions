name: Python Steps, then Push to Docker Container
description: Runs the standard steps for Python, then push to a docker container.
inputs:
  PYTHON_VERSION:
    description: The version of Python to use
    required: true
    default: 3.x
#  RUN_UNIT_TESTS:
#    description: Set to true to run unit tests
#    required: false
#    default: false
  PASSWORD:
     description: Password for docker
     required: true
outputs:
  PROJECT_FILES:
    description: "The pattern used to match files in the project"
    value: ${{ steps.project_files.outputs.files }}

runs:
  using: "composite"
  steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ inputs.PYTHON_VERSION }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ inputs.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install requirements
      run: |
        pip install -r requirements.txt
#        pip install flake8
#        pip install pylint
      shell: bash

    - name: Identify project files
      id: project_files
      run: |
        if [ -d "./tests" ];
        then
          echo "::set-output name=files::*.py tests/*.py"
        else
          echo "::set-output name=files::*.py"
        fi
      shell: bash

#    - name: flake8
#      run: flake8 --ignore=F841,F811,F541,F405,F403,F401,E501,E231,E126,E262,W504,W293,W291,W605,W503,W391 ${{ steps.project_files.outputs.files }}
#      shell: bash
#
#    - name: pylint
#      run: pylint --errors-only --disable=C0301 --disable=E0102 --disable=E1136 ${{ steps.project_files.outputs.files }}
#      shell: bash
#
#    - name: unit tests
#      if: ${{ inputs.RUN_UNIT_TESTS == false }}
#      run: python -m unittest --verbose --failfast
#      shell: bash

    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
      with:
        cosign-release: 'v1.9.0'

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ inputs.PASSWORD }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      shell: bash
      run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
